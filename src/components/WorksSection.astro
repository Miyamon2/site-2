---
// 作品データを props として受け取る
export interface Props {
    works?: Array<{
        image: string;
        title: string;
        description: string;
        alt: string;
    }>;
}

const { works = [] } = Astro.props;

// デフォルトの作品データ
const defaultWorks = [
    {
        image: "./帽子のM.K2_ロゴ.png",
        title: "M.K2ロゴ",
        description: "未来の自分をイメージして作った",
        alt: "未来の自分をイメージして作った"
    },
    {
        image: "./miyamoto_collage.png",
        title: "Miyamotoコラージュ",
        description: "宇宙の神がいる空間にある不思議な茶碗、茶碗の中には大きい木が生えていてその中には動物たちの楽園が、その茶碗に驚きいたずらしようと神",
        alt: "宇宙の神がいる空間にある不思議な茶碗、茶碗の中には大きい木が生えていてその中には動物たちの楽園が、その茶碗に驚きいたずらしようと神"
    },
    {
        image: "./タピオカ広告__miyamoto_0619.png",
        title: "和風の架空タピオカ広告",
        description: "仮想の和風オリジナルタピオカ広告をデザインしたもの",
        alt: "仮想の和風タピオカ広告、金箔と銀箔の背景の中に商品の京都特産抹茶のタピオカジュースがあり金閣寺が焼き付けられている"
    },
    {
        image: "./家族の木.png",
        title: "家族の木",
        description: "花畑の平原にある三本の木の家族",
        alt: "花畑の平原にある三本の木の家族"
    },
    {
        image: "./みなぎる木.png",
        title: "みなぎる木",
        description: "大きく勢いよく風が立つほどのみなぎる木",
        alt: "大きく勢いよく風が立つほどのみなぎる木"
    },
    {
        image: "./お昼寝タイムの猫.png",
        title: "猫のお昼寝タイム",
        description: "猫が気持ちよさそうにお昼寝している絵",
        alt: "猫が気持ちよさそうにお昼寝している絵、みやもんの描いた猫の中で一番うまくできている"
    }
];

const displayWorks = works.length > 0 ? works : defaultWorks;
---

<section class="works-section">
    <h2>作品たち</h2>
    <div class="works-gallery">
        {displayWorks.map((work) => (
            <div class="work-item">
                <img src={work.image} alt={work.alt} class="work-image" />
                <h3 class="work-title">{work.title}</h3>
                <p class="work-description">{work.description}</p>
            </div>
        ))}
    </div>
</section>

<!-- モーダル -->
<dialog id="imageModal" class="modal">
    <div class="modal-container">
        <button class="close" type="button">&times;</button>
        <img class="modal-content" id="modalImage">
        <div id="caption"></div>
    </div>
</dialog>

<script>
    // 画像クリック時のモーダル表示
    document.addEventListener('DOMContentLoaded', function() {
        const modal = document.getElementById('imageModal');
        const modalImg = document.getElementById('modalImage');
        const captionText = document.getElementById('caption');
        const closeBtn = document.querySelector('.close');
        
        // 全ての作品画像にクリックイベントを追加
        const workImages = document.querySelectorAll('.work-image');
        workImages.forEach(img => {
            img.addEventListener('click', function() {
                if (modal && modal instanceof HTMLDialogElement) {
                    modal.showModal();
                    if (modalImg && modalImg instanceof HTMLImageElement && img instanceof HTMLImageElement) {
                        modalImg.src = img.src;
                    }
                    if (captionText && (img as HTMLImageElement).alt) {
                        captionText.innerHTML = (img as HTMLImageElement).alt;
                    }
                }
            });
        });
        
        // ×ボタンでモーダルを閉じる
        if (closeBtn) {
            closeBtn.addEventListener('click', function() {
                if (modal && modal instanceof HTMLDialogElement) {
                    modal.close();
                }
            });
        }
        
        // モーダルの外側をクリックして閉じる
        if (modal && modal instanceof HTMLDialogElement) {
            modal.addEventListener('click', function(event) {
                const rect = modal.getBoundingClientRect();
                const isInDialog = (rect.top <= event.clientY && event.clientY <= rect.top + rect.height &&
                                  rect.left <= event.clientX && event.clientX <= rect.left + rect.width);
                if (!isInDialog) {
                    modal.close();
                }
            });
        }
        
        // ESCキーでモーダルを閉じる（dialog要素は自動的にESCキーに対応）
    });
</script>

<style>
    /* 作品セクションのスタイル */
    .works-section {
        border-radius: 15px;
        margin-bottom: 3.5rem;
        animation: fadeIn 0.8s ease-out forwards;
        opacity: 0;
        position: relative;
    }

    .works-section h2 {
        color: #64b5f6;
        font-size: 1.8rem;
        margin-bottom: 1.5rem;
        position: relative;
        padding-left: 1rem;
    }

    .works-section h2::before {
        content: '';
        position: absolute;
        left: 0;
        top: 50%;
        transform: translateY(-50%);
        width: 4px;
        height: 70%;
        background: linear-gradient(to bottom, #64b5f6, #81c784);
        border-radius: 2px;
    }

    .works-gallery {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
        max-width: 100%;
        gap: 2rem;
        margin-top: 2rem;
    }

    /* レスポンシブ対応で横3つまでに制限 */
    @media (min-width: 1200px) {
        .works-gallery {
            grid-template-columns: repeat(3, 1fr);
        }
    }

    @media (min-width: 768px) and (max-width: 1199px) {
        .works-gallery {
            grid-template-columns: repeat(2, 1fr);
        }
    }

    @media (max-width: 767px) {
        .works-gallery {
            grid-template-columns: 1fr;
        }
    }

    .work-item {
        background: linear-gradient(135deg, rgba(100, 181, 246, 0.1), rgba(129, 199, 132, 0.1));
        border: 1px solid rgba(255, 255, 255, 0.1);
        border-radius: 15px;
        padding: 1.5rem;
        text-align: center;
        transition: all 0.3s ease;
        backdrop-filter: blur(5px);
    }

    .work-item:hover {
        transform: translateY(-5px);
        background: linear-gradient(135deg, rgba(100, 181, 246, 0.2), rgba(129, 199, 132, 0.2));
        box-shadow: 0 8px 20px rgba(0, 0, 0, 0.2);
    }

    .work-item img {
        width: 100%;
        height: 250px;
        object-fit: contain;
        border-radius: 10px;
        margin-bottom: 1rem;
        background-color: rgba(255, 255, 255, 0.05);
        cursor: pointer;
        transition: transform 0.2s ease;
    }

    .work-item img:hover {
        transform: scale(1.05);
    }

    .work-title {
        color: #64b5f6;
        font-size: 1.3rem;
        font-weight: bold;
        margin: 1rem 0 0.5rem 0;
    }

    .work-description {
        color: #b0b0b0;
        font-size: 0.9rem;
        line-height: 1.4;
        margin: 0;
    }

    /* モーダルのスタイル */
    .modal {
        border: none;
        padding: 0;
        background: transparent;
        max-width: 100vw;
        max-height: 100vh;
        width: 100%;
        height: 100%;
    }

    .modal::backdrop {
        background-color: rgba(0, 0, 0, 0.9);
        backdrop-filter: blur(5px);
    }

    .modal-container {
        position: relative;
        width: 100%;
        height: 100%;
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        padding: 50px 20px 20px;
        box-sizing: border-box;
    }

    .modal-content {
        width: 90%;
        max-width: 1200px;
        max-height: 80vh;
        object-fit: contain;
        border-radius: 10px;
        animation: zoom 0.3s ease;
    }

    @keyframes zoom {
        from { transform: scale(0.1); }
        to { transform: scale(1); }
    }

    .close {
        position: absolute;
        top: 15px;
        right: 35px;
        color: #f1f1f1;
        font-size: 40px;
        font-weight: bold;
        transition: 0.3s;
        cursor: pointer;
        z-index: 1001;
        background: none;
        border: none;
        padding: 0;
    }

    .close:hover,
    .close:focus {
        color: #64b5f6;
        text-decoration: none;
    }

    #caption {
        width: 80%;
        max-width: 700px;
        text-align: center;
        color: #ccc;
        padding: 10px 0;
        height: 150px;
        font-size: 1.1rem;
        line-height: 1.4;
        margin-top: 20px;
    }

    @keyframes fadeIn {
        from { opacity: 0; transform: translateY(20px); }
        to { opacity: 1; transform: translateY(0); }
    }

    @media (max-width: 768px) {
        .works-gallery {
            grid-template-columns: 1fr;
            gap: 1.5rem;
        }
        
        .work-item img {
            height: 150px;
        }
        
        .work-title {
            font-size: 1.1rem;
        }

        .modal {
            padding-top: 20px;
        }

        .modal-content {
            width: 95%;
            max-height: 70vh;
        }

        .close {
            top: 10px;
            right: 20px;
            font-size: 30px;
        }

        #caption {
            font-size: 1rem;
            width: 90%;
        }
    }
</style>
